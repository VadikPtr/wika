<div class="modal fade" id="remove-page-modal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Remove @path?</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body d-flex flex-row align-items-center">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          Cancel
        </button>
        <div class="flex-grow-1">&nbsp;</div>
        <form method="post" @onsubmit="remove_page" @formname="remove_page">
          <button type="submit" class="btn btn-outline-danger">
            <i class="bi bi-trash"></i> Remove
          </button>
          <AntiforgeryToken/>
        </form>
      </div>
    </div>
  </div>
</div>

<button type="submit" class="btn btn-outline-danger"
        data-bs-toggle="modal" data-bs-target="#remove-page-modal">
  <i class="bi bi-trash"></i> Remove
</button>

@code
{
  [Inject] private AppDbContext        db_context         { get; set; } = null!;
  [Inject] private NavigationManager   navigation_manager { get; set; } = null!;
  [Inject] private ILogger<RemovePage> logger             { get; set; } = null!;

  [Parameter] public string path { get; set; } = null!;

  private async Task remove_page()
  {
    logger.LogInformation("Remove page '{}'", path);
    db_context.pages.RemoveRange(db_context.pages.Where(x => x.path == path));
    await db_context.SaveChangesAsync();
    navigation_manager.NavigateTo("/");
  }
}