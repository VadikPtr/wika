@page "/pages/{*path}"
@using Microsoft.EntityFrameworkCore
@using WikaApp.Auth
@using WikaApp.Components.Layout
@using WikaApp.Components.Components
@attribute [RequireAuthorization]
@layout PageLayout

<PageTitle>@path</PageTitle>

@if (page == null)
{
  <h1>@path</h1>
  <h2>Page with path @path not found.</h2>
  <AddPage path="@path"/>
}
else if (edit.HasValue && edit.Value)
{
  <h1 class="mb-3">@path</h1>
  <EditPage page=@(page)/>
}
else
{
  <div class="d-flex flex-row align-items-center mb-3">
    <h1 class="flex-grow-1">@path</h1>

    <div class="mx-3">@(page.last_modified)</div>

    <div class="btn-group">
      <a type="button" class="btn btn-outline-secondary edit-page" href=@("/pages/" + path + "?edit=true")>
        <i class="bi bi-pencil"></i> Edit
      </a>
      <RemovePage path="@path"/>
    </div>
  </div>

  <div id="md-text" class="d-none">@(page.content)</div>
  <div id="md-render"></div>
}

<style>
  .edit-page {
    border-right: 0;
  }
</style>

@code
{
  [Inject] private AppDbContext   db_context { get; set; } = null!;
  [Inject] private ILogger<Users> logger     { get; set; } = null!;

  [SupplyParameterFromQuery] public bool? edit { get; set; }

  [Parameter] public string path { get; set; } = null!;

  private PageStored? page { get; set; }

  protected override async Task OnInitializedAsync()
  {
    await refresh();
  }

  private async Task refresh()
  {
    page = await db_context.pages.FirstOrDefaultAsync(x => x.path == path);
  }
}